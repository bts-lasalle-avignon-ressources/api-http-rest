openapi: 3.0.3
info:
  title: API Exemple ESP32
  version: "1.0"
  description: Voir [api-http-rest](https://github.com/bts-lasalle-avignon-ressources/api-http-rest)
  contact:
    name: OpenExempleESP32
    email: tvaira@free.fr
    url: http://tvaira.free.fr
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://{adresseIPESP32}
    description: L'IoT ESP32
    variables:
      adresseIPESP32:
        default: 192.168.0.1
        description: |
          Aller sur http://iot-esp32.local/
  - url: http://localhost:5000
  - url: https://virtserver.swaggerhub.com/TVAIRA/ESP32/1.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: leds
    description: Les leds de l'ESP32
  - name: led
    description: Toutes les opérations sur une Led de l'ESP32
paths:
  /leds:
    get:
      summary: Lister les leds
      description: Lister toutes les leds disponibles
      operationId: getLeds
      tags:
        - leds
      responses:
        "200":
          description: Succès de l'opération
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getLeds"
  /led/{idLed}:
    parameters:
      - name: idLed
        in: path
        description: ID de la led
        required: true
        schema:
          type: integer
          format: int32
    get:
      summary: Obtenir les détails d'une Led
      description: Obtenir les détails d'une seule Led `{idLed}`
      operationId: getLed
      tags:
        - led
      responses:
        "200":
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Led"
              examples:
                LedRouge:
                  value:
                    idLed: 1
                    etat: false
                    couleur: "rouge"
                    broche: 5
                LedVerte:
                  value:
                    idLed: 2
                    etat: true
                    couleur: "verte"
                    broche: 16
        "404":
          description: Led non trouvée
    put:
      summary: Mettre à jour une Led
      description: Mettre à jour les informations d'une Led `{idLed}`
      operationId: updateLed
      tags:
        - led
      requestBody:
        description: Met à jour les informations d'une Led
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Led"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Led"
        required: true
      responses:
        "200":
          description: Succès de l'opération
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Led"
        "400":
          description: Opération invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erreur"
              examples:
                DemandeIncomplete:
                  value:
                    code: 1
                    message: "La demande est incomplète"
                DemandeInvalide:
                  value:
                    code: 2
                    message: "La demande est invalide"
    post:
      summary: Mettre à jour une Led
      description: Mettre à jour les informations d'une Led `{idLed}`
      operationId: updateLedWithForm
      tags:
        - led
      requestBody:
        description: Met à jour les informations d'une Led
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Led"
        required: true
      responses:
        "400":
          description: Opération invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erreur"
              examples:
                DemandeIncomplete:
                  value:
                    code: 1
                    message: "La demande est incomplète"
                DemandeInvalide:
                  value:
                    code: 2
                    message: "La demande est invalide"
    delete:
      summary: Supprimer une Led
      description: Supprimer une Led `{idLed}`
      operationId: deleteLed
      tags:
        - led
      responses:
        "400":
          description: Opération invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erreur"
              examples:
                DemandeIncomplete:
                  value:
                    code: 1
                    message: "La demande est incomplète"
                DemandeInvalide:
                  value:
                    code: 2
                    message: "La demande est invalide"
  /led:
    post:
      tags:
        - led
      summary: Ajouter une Led
      description: Ajouter une nouvelle Led
      operationId: addLed
      requestBody:
        description: Ajout d'une Led
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewLed"
        required: true
      responses:
        "200":
          description: Succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Led"
        "400":
          description: Opération invalide
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Erreur"
              examples:
                DemandeIncomplete:
                  value:
                    code: 1
                    message: "La demande est incomplète"
                DemandeInvalide:
                  value:
                    code: 2
                    message: "La demande est invalide"
components:
  schemas:
    getLeds:
      type: array
      items:
        $ref: "#/components/schemas/Led"
      example:
        [
          { "idLed": 1, "etat": false, "couleur": "rouge", "broche": 5 },
          { "idLed": 2, "etat": false, "couleur": "verte", "broche": 16 },
        ]
    Led:
      type: object
      description: Une Led
      required:
        - idLed
        - etat
      properties:
        idLed:
          type: integer
          format: int32
        etat:
          type: boolean
          description: |
            `true` si la led est allumée sinon `false`
        couleur:
          type: string
          enum:
            - rouge
            - verte
            - orange
        broche:
          type: integer
          description: GPIO OUTPUT
          format: int32
          enum:
            - 4
            - 5
            - 13
            - 14
            - 16
            - 17
            - 18
            - 19
            - 21
            - 22
            - 23
            - 25
            - 26
            - 27
            - 32
            - 33
    NewLed:
      type: object
      description: Une Led
      required:
        - couleur
        - broche
      properties:
        couleur:
          type: string
          enum:
            - rouge
            - verte
            - orange
        broche:
          type: integer
          description: GPIO OUTPUT
          format: int32
          enum:
            - 4
            - 5
            - 13
            - 14
            - 16
            - 17
            - 18
            - 19
            - 21
            - 22
            - 23
            - 25
            - 26
            - 27
            - 32
            - 33
    Erreur:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
